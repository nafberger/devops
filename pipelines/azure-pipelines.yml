trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TF_VERSION: 'latest'
  TF_PLAN_FILE: 'tfplan'

steps:
# ✅ Install Terraform
- task: TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '$(TF_VERSION)'

# 🧹 Clean up previous state and lock file
- script: rm -rf infra/.terraform infra/terraform.lock.hcl
  displayName: 'Clean previous Terraform state and lock file'

# 🔁 Terraform Init
- task: TerraformTask@5
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    commandOptions: '-reconfigure'
    backendServiceArm: 'terraform-sp-connection'
    backendAzureRmResourceGroupName: 'terraform-storage-rg'
    backendAzureRmStorageAccountName: 'tfstateaccountdemo'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'prod.terraform.tfstate'
    workingDirectory: 'infra'

# 📄 Terraform Plan
- task: TerraformTask@5
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=$(TF_PLAN_FILE)'
    workingDirectory: 'infra'
    environmentServiceNameAzureRM: 'terraform-sp-connection'

# 🚀 Terraform Apply
- task: TerraformTask@5
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '$(TF_PLAN_FILE)'
    workingDirectory: 'infra'
    environmentServiceNameAzureRM: 'terraform-sp-connection'
